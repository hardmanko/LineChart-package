% Generated by roxygen2 (4.0.1): do not edit by hand
\name{lineChartDf}
\alias{lineChartDf}
\title{Plot data using a plotting data frame}
\usage{
lineChartDf(plotDf, title = "", xlab = NULL, ylab = NULL, ylim = NULL,
  xlim = NULL, plotXAxis = TRUE, plotYAxis = TRUE, lwd.axes = par()$lwd,
  add = FALSE)
}
\arguments{
\item{plotDf}{The data frame to plotted.}

\item{title}{The title to place at the top of the plot.}

\item{xlab}{The label to place on the x-axis. If NULL (default), the name of the source of data for the x-variable will be used, if available.}

\item{ylab}{The label to place on the y-axis. If NULL (default), the name of the source of data for the y-variable will be used if available.}

\item{xlim}{The plotting range of the x-axis.}

\item{ylim}{The plotting range of the y-axis.}

\item{plotXAxis}{Should the x-axis be plotted?}

\item{plotYAxis}{Should the y-axis be plotted?}

\item{lwd.axes}{The line width of the axes and box around the plotting area.}

\item{add}{If FALSE, a new plot will be started and the data plotted in it. If TRUE, the data will be plotted in the current plotting device, if any.}
}
\description{
This function uses a data frame with the same format as one created by createPlottingDf.
This is mainly an internal function that is called by lineChart, but it can be called
directly if more control of plotDf is desired.
}
\details{
If xlab and/or ylab are NULL, the original names of the source of the data are used for plotting, if available. The original names are stored in attributes and sometimes attributes are lost or, in the case of a manually created plotting data frame, not present. The original names are stored in an attribute called "originalNames" which is a list with "y", "x", and "group" components.
}
\examples{
data(ChickWeight)
#Use just a subset of the data
ChickWeight = ChickWeight[ ChickWeight$Diet \%in\% c(1, 3), ]

plotDf = createPlottingDf(weight ~ Time * Diet, ChickWeight, errBarType="SD")

#Make single-sided error bars, using the standard deviation on just one side
plotDf[plotDf$group == 1, ]$errBar = 0
plotDf[plotDf$group == 3, ]$errBarLower = 0

lineChartDf(plotDf)

#Make assymetrical error bars based on quantiles in the data.
quants = aggregate(weight ~ Time * Diet, ChickWeight, function(x) { quantile(x, c(.25, .75)) })

#The values for errBar and errBarLower must be relative to the y value of the plotting data frame.
plotDf$errBarLower = quants[,3][,1] - plotDf$y
plotDf$errBar = quants[,3][,2] - plotDf$y

lineChartDf(plotDf)
}

